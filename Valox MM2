-- MM2 Cheat Hub - Fixed Gun ESP Visibility and Gun Grab by Grok (xAI)
-- Features: ESP (White for Dead Players, Persistent), Stab & Loop Bring (G Key, Murderer Only), Shoot Murderer (F Key), Gun ESP (Yellow Billboard/SelectionBox, Visible Through Walls), Gun Grab (Button)
-- Fixes: Gun ESP visibility through walls, Gun Grab nil value, ESP white on death, persists across rounds, Stab only for murderer, CanCollide handling, Reduced console prints, Removed "Knife stabbed!" and "Equipped [tool]" notifications
-- Compatibility: JJSploit v8.16.5, Windows, mobile-friendly
-- Date: October 1, 2025

-- ======= Services =======
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local localPlayer = Players.LocalPlayer

-- ======= Notification Helper =======
local function notify(title, text, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", { Title = title, Text = text, Duration = duration or 5 })
    end)
end

-- ======= Cleanup Previous Runs =======
if getgenv().Connections then
    for _, c in pairs(getgenv().Connections) do
        pcall(function() c:Disconnect() end)
    end
end
getgenv().Connections = {}
getgenv().matchStarted = false
getgenv().matchEnded = false
getgenv().hasPrintedNoRoles = false
getgenv().hasPrintedRoles = false

-- ======= Defaults =======
getgenv().StabSettings = getgenv().StabSettings or {
    Enabled = false,
    Key = Enum.KeyCode.G,
    LoopBringActive = false,
    TargetCFrame = nil,
    OriginalPositions = {},
    Duration = 3
}
getgenv().ShootSettings = getgenv().ShootSettings or { Enabled = false, Key = Enum.KeyCode.F }
getgenv().ESPSettings = { Enabled = false, Highlights = {}, NameTags = {} }
getgenv().GunESPSettings = { Enabled = false, Spheres = {}, SelectionBoxes = {}, Billboards = {} }
getgenv().playerData = {} -- { [playerName] = { role = "Murderer"/"Sheriff"/"Innocent"/"Unknown"/"Dead", position = Vector3, torsoCenter = Vector3 } }
local LOOP_BRING_DISTANCE = 1
local ROLE_CHECK_INTERVAL = 0.5

-- ======= Load Rayfield =======
getgenv().SecureMode = true
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield', true))()
end)
if not success or not Rayfield or type(Rayfield.CreateWindow) ~= "function" then
    notify("Error", "Failed to load Rayfield: " .. tostring(Rayfield) .. ". Check network.", 10)
    return
end
notify("Success", "Rayfield library loaded successfully!", 5)
getgenv().Rayfield = Rayfield

-- ======= Gun ESP Functions =======
local function createGunESP(obj)
    local success, err = pcall(function()
        if (obj.Name == "GunDrop" or obj.Name:match("Gun")) and obj:IsDescendantOf(Workspace) and not getgenv().GunESPSettings.Billboards[obj] then
            local position
            if obj:IsA("BasePart") then
                position = obj.Position
            elseif obj:IsA("Tool") and obj:FindFirstChild("Handle") and obj.Handle:IsA("BasePart") then
                position = obj.Handle.Position
            elseif obj:FindFirstChildOfClass("BasePart") then
                position = obj:FindFirstChildOfClass("BasePart").Position
            else
                return
            end

            -- Create sphere (for debugging, not primary visibility)
            local sphere = Instance.new("Part")
            sphere.Name = "GunESPSphere"
            sphere.Shape = Enum.PartType.Ball
            sphere.Size = Vector3.new(3, 3, 3)
            sphere.Position = position
            sphere.Anchored = true
            sphere.CanCollide = false
            sphere.Transparency = 0.8
            sphere.Material = Enum.Material.Neon
            sphere.Color = Color3.fromRGB(255, 255, 0)
            sphere.Parent = Workspace
            getgenv().GunESPSettings.Spheres[obj] = sphere

            -- SelectionBox for outline
            local selectionBox = Instance.new("SelectionBox")
            selectionBox.Name = "GunESPSelectionBox"
            selectionBox.LineThickness = 0.05
            selectionBox.Color3 = Color3.fromRGB(255, 255, 0)
            selectionBox.SurfaceColor3 = Color3.fromRGB(255, 255, 0)
            selectionBox.SurfaceTransparency = 0.8
            selectionBox.Adornee = sphere
            selectionBox.Parent = Workspace
            getgenv().GunESPSettings.SelectionBoxes[obj] = selectionBox

            -- BillboardGui for visibility through walls
            local billboard = Instance.new("BillboardGui")
            billboard.Name = "GunESPGui"
            billboard.Size = UDim2.new(0, 50, 0, 50)
            billboard.StudsOffset = Vector3.new(0, 3, 0)
            billboard.AlwaysOnTop = true
            billboard.Adornee = sphere
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.Text = obj.Name
            label.TextColor3 = Color3.fromRGB(255, 255, 0)
            label.TextSize = 12
            label.TextStrokeTransparency = 0
            label.Parent = billboard
            billboard.Parent = Workspace
            getgenv().GunESPSettings.Billboards[obj] = billboard
        end
    end)
    if not success then
        notify("Error", "Failed to create Gun ESP for " .. tostring(obj.Name) .. ": " .. tostring(err), 5)
    end
end

local function clearGunESP()
    local success, err = pcall(function()
        for obj, sphere in pairs(getgenv().GunESPSettings.Spheres) do
            if sphere and sphere.Parent then
                pcall(function() sphere:Destroy() end)
            end
            getgenv().GunESPSettings.Spheres[obj] = nil
        end
        for obj, selectionBox in pairs(getgenv().GunESPSettings.SelectionBoxes) do
            if selectionBox and selectionBox.Parent then
                pcall(function() selectionBox:Destroy() end)
            end
            getgenv().GunESPSettings.SelectionBoxes[obj] = nil
        end
        for obj, billboard in pairs(getgenv().GunESPSettings.Billboards) do
            if billboard and billboard.Parent then
                pcall(function() billboard:Destroy() end)
            end
            getgenv().GunESPSettings.Billboards[obj] = nil
        end
        notify("Gun ESP", "Cleared all gun visuals", 3)
    end)
    if not success then
        notify("Error", "Failed to clear Gun ESP: " .. tostring(err), 5)
    end
end

local function setupGunESP()
    local success, err = pcall(function()
        clearGunESP()
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj.Name == "GunDrop" or obj.Name:match("Gun") then
                createGunESP(obj)
            end
        end
        local gunConn = Workspace.DescendantAdded:Connect(function(obj)
            if getgenv().GunESPSettings.Enabled and (obj.Name == "GunDrop" or obj.Name:match("Gun")) then
                createGunESP(obj)
            end
        end)
        local removeConn = Workspace.DescendantRemoving:Connect(function(obj)
            if obj.Name == "GunDrop" or obj.Name:match("Gun") then
                if getgenv().GunESPSettings.Spheres[obj] then
                    pcall(function() getgenv().GunESPSettings.Spheres[obj]:Destroy() end)
                    getgenv().GunESPSettings.Spheres[obj] = nil
                end
                if getgenv().GunESPSettings.SelectionBoxes[obj] then
                    pcall(function() getgenv().GunESPSettings.SelectionBoxes[obj]:Destroy() end)
                    getgenv().GunESPSettings.SelectionBoxes[obj] = nil
                end
                if getgenv().GunESPSettings.Billboards[obj] then
                    pcall(function() getgenv().GunESPSettings.Billboards[obj]:Destroy() end)
                    getgenv().GunESPSettings.Billboards[obj] = nil
                end
            end
        end)
        table.insert(getgenv().Connections, gunConn)
        table.insert(getgenv().Connections, removeConn)
        notify("Gun ESP", "Setup completed", 3)
    end)
    if not success then
        notify("Error", "Failed to setup Gun ESP: " .. tostring(err), 5)
        task.delay(5, setupGunESP)
    end
end

-- ======= Rayfield GUI Setup =======
local Window = Rayfield:CreateWindow({
    Name = "MM2 Cheat Hub",
    LoadingTitle = "Murder Mystery 2 Cheats",
    LoadingSubtitle = "by xAI",
    ConfigurationSaving = { Enabled = false },
    KeySystem = false
})

local MainTab = Window:CreateTab("Main", nil)
MainTab:CreateToggle({
    Name = "Stab & Loop Bring",
    CurrentValue = getgenv().StabSettings.Enabled,
    Callback = function(Value)
        local success, err = pcall(function()
            getgenv().StabSettings.Enabled = Value
            if not Value then
                getgenv().StabSettings.LoopBringActive = false
                revertPlayers("StabSettings")
            end
            notify("Cheat Hub", "Stab & Loop Bring " .. (Value and "enabled (G Key)" or "disabled") .. ".", 3)
        end)
        if not success then
            notify("Error", "Stab toggle failed: " .. tostring(err), 5)
        end
    end
})

MainTab:CreateSlider({
    Name = "Loop Bring Duration (seconds)",
    Range = {1, 10},
    Increment = 1,
    CurrentValue = getgenv().StabSettings.Duration,
    Callback = function(Value)
        local success, err = pcall(function()
            getgenv().StabSettings.Duration = Value
            notify("Cheat Hub", "Loop Bring duration set to " .. Value .. "s", 3)
        end)
        if not success then
            notify("Error", "Duration slider failed: " .. tostring(err), 5)
        end
    end
})

MainTab:CreateToggle({
    Name = "Shoot Murderer",
    CurrentValue = getgenv().ShootSettings.Enabled,
    Callback = function(Value)
        local success, err = pcall(function()
            getgenv().ShootSettings.Enabled = Value
            notify("Cheat Hub", "Shoot Murderer " .. (Value and "enabled (F Key)" or "disabled") .. ".", 3)
        end)
        if not success then
            notify("Error", "Shoot toggle failed: " .. tostring(err), 5)
        end
    end
})

MainTab:CreateToggle({
    Name = "ESP (Filled, 75% Transparent)",
    CurrentValue = getgenv().ESPSettings.Enabled,
    Callback = function(Value)
        local success, err = pcall(function()
            getgenv().ESPSettings.Enabled = Value
            if not Value then
                clearESP()
            else
                setupESP()
            end
            notify("Cheat Hub", "ESP " .. (Value and "enabled" or "disabled") .. ".", 3)
        end)
        if not success then
            notify("Error", "ESP toggle failed: " .. tostring(err), 5)
        end
    end
})

MainTab:CreateToggle({
    Name = "Gun ESP (Yellow, Visible Through Walls)",
    CurrentValue = getgenv().GunESPSettings.Enabled,
    Callback = function(Value)
        local success, err = pcall(function()
            getgenv().GunESPSettings.Enabled = Value
            if not Value then
                clearGunESP()
            else
                setupGunESP()
            end
            notify("Cheat Hub", "Gun ESP " .. (Value and "enabled" or "disabled") .. ".", 3)
        end)
        if not success then
            notify("Error", "Gun ESP toggle failed: " .. tostring(err), 5)
        end
    end
})

MainTab:CreateButton({
    Name = "Grab Gun (Teleport & Equip)",
    Callback = function()
        local success, err = pcall(grabGun)
        if not success then
            notify("Error", "Gun Grab failed: " .. tostring(err), 5)
        end
    end
})

MainTab:CreateLabel("Keybinds: G (Toggle Stab & Loop Bring), F (Shoot Murderer)")
MainTab:CreateLabel("ESP Colors: Red (Murderer), Blue (Sheriff), Green (Innocent), White (Other/Dead), Yellow (Guns)")

-- ======= Helpers =======
local function UnloadAll()
    local success, err = pcall(function()
        for _, conn in pairs(getgenv().Connections) do
            pcall(function() conn:Disconnect() end)
        end
        getgenv().Connections = {}
        clearESP()
        clearGunESP()
        getgenv().StabSettings.LoopBringActive = false
        revertPlayers("StabSettings")
        pcall(function() Rayfield:Destroy() end)
        getgenv().Rayfield = nil
        getgenv().StabSettings = nil
        getgenv().ShootSettings = nil
        getgenv().ESPSettings = nil
        getgenv().GunESPSettings = nil
        getgenv().playerData = nil
        getgenv().matchStarted = nil
        getgenv().matchEnded = nil
        notify("Cheat Hub", "Script unloaded and cleaned up", 5)
    end)
    if not success then
        notify("Error", "Failed to unload script: " .. tostring(err), 5)
    end
end

local function equipTool(toolName)
    local success, result = pcall(function()
        local tool = localPlayer.Backpack:FindFirstChild(toolName) or localPlayer.Character:FindFirstChild(toolName) or getNil(toolName, "Tool")
        if tool and tool:IsA("Tool") then
            localPlayer.Character.Humanoid:EquipTool(tool)
            return tool
        else
            notify("Error", toolName .. " not found in inventory.", 5)
            return nil
        end
    end)
    if not success then
        notify("Error", "Failed to equip " .. toolName .. ": " .. tostring(result), 5)
        return nil
    end
    return result
end

function getNil(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

-- ======= Role Detection =======
local success, GetCurrentPlayerData = pcall(function()
    return ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Gameplay"):WaitForChild("GetCurrentPlayerData")
end)
if not success then
    notify("Error", "Failed to find GetCurrentPlayerData: " .. tostring(GetCurrentPlayerData), 10)
    return
end

local invokeFunction
local success, CurrentRoundClient = pcall(function()
    return ReplicatedStorage:WaitForChild("Modules"):WaitForChild("CurrentRoundClient")
end)
if success and CurrentRoundClient then
    local success, module = pcall(function()
        return require(CurrentRoundClient).GetLatestPlayerData
    end)
    invokeFunction = success and module or function()
        warn("Failed to load CurrentRoundClient.GetLatestPlayerData")
        return nil
    end
else
    invokeFunction = function()
        local success, result = pcall(function()
            return GetCurrentPlayerData:InvokeServer()
        end)
        if success then
            return result
        else
            warn("Invoke failed: " .. tostring(result))
            return nil
        end
    end
end

local function updatePlayerData()
    local success, data = pcall(invokeFunction)
    if success and data and not data.error then
        for _, player in ipairs(Players:GetPlayers()) do
            local roleData = data[player.Name]
            local character = player.Character
            local position = character and character:GetPrimaryPartCFrame().Position or Vector3.new(0, 0, 0)
            local torsoCenter = character and character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.Position or position
            local isDead = character and character:FindFirstChild("Humanoid") and character.Humanoid.Health <= 0
            getgenv().playerData[player.Name] = {
                role = isDead and "Dead" or (roleData and roleData.Role or "Unknown"),
                position = position,
                torsoCenter = torsoCenter
            }
        end
        return true
    else
        return false
    end
end

-- Continuous role update loop with round change detection
local function setupRoleLoop()
    local lastMatchStarted = getgenv().matchStarted
    local lastMatchEnded = getgenv().matchEnded
    local roleConn
    local success, err = pcall(function()
        roleConn = RunService.Heartbeat:Connect(function()
            local success, roleErr = pcall(updatePlayerData)
            if not success then
                notify("Error", "Role update failed: " .. tostring(roleErr), 5)
                return
            end
            -- Set match status flags
            local murderer, sheriff, innocents = "", "", {}
            for playerName, data in pairs(getgenv().playerData) do
                if data.role == "Murderer" then
                    murderer = playerName
                elseif data.role == "Sheriff" then
                    sheriff = playerName
                elseif data.role == "Innocent" then
                    table.insert(innocents, playerName)
                end
            end
            if (murderer ~= "" or sheriff ~= "" or #innocents > 0) and not getgenv().hasPrintedRoles then
                getgenv().matchStarted = true
                getgenv().hasPrintedRoles = true
                getgenv().hasPrintedNoRoles = false
                notify("Match Status", "Match started! Roles detected.", 3)
            elseif murderer == "" and sheriff == "" and #innocents == 0 and not getgenv().hasPrintedNoRoles then
                getgenv().matchEnded = true
                getgenv().hasPrintedNoRoles = true
                getgenv().hasPrintedRoles = false
                notify("Match Status", "Match ended! No roles detected.", 3)
            end
            -- Reinitialize ESP on round change
            if getgenv().ESPSettings.Enabled and (getgenv().matchStarted ~= lastMatchStarted or getgenv().matchEnded ~= lastMatchEnded) then
                clearESP()
                setupESP()
            end
            -- Reinitialize Gun ESP on round change
            if getgenv().GunESPSettings.Enabled and (getgenv().matchStarted ~= lastMatchStarted or getgenv().matchEnded ~= lastMatchEnded) then
                clearGunESP()
                setupGunESP()
            end
            lastMatchStarted = getgenv().matchStarted
            lastMatchEnded = getgenv().matchEnded
        end)
    end)
    if success then
        table.insert(getgenv().Connections, roleConn)
    else
        notify("Error", "Failed to start role detection loop: " .. tostring(err), 10)
        task.delay(5, setupRoleLoop)
    end
end
setupRoleLoop()

-- ======= Sheriff Color Fix in findMurdererAndSheriff =======
local function findMurdererAndSheriff()
    local success, result = pcall(function()
        local murderer, sheriff
        for playerName, data in pairs(getgenv().playerData) do
            local player = Players:FindFirstChild(playerName)
            if player and player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if data.role == "Murderer" then
                    murderer = player
                elseif data.role == "Sheriff" then
                    sheriff = player
                end
            end
        end
        return murderer, sheriff
    end)
    if not success then
        notify("Error", "Failed to find murderer or sheriff: " .. tostring(result), 5)
        return nil, nil
    end
    return result
end

-- ======= Shoot Murderer =======
local function shootGun()
    local success, err = pcall(function()
        if not getgenv().ShootSettings.Enabled then
            notify("Shoot", "Cannot shoot: Shoot Murderer not enabled", 3)
            return
        end
        if getgenv().playerData[localPlayer.Name] and getgenv().playerData[localPlayer.Name].role ~= "Sheriff" then
            notify("Shoot", "Cannot shoot: You are not the sheriff", 3)
            return
        end
        local tool = equipTool("Gun") or equipTool("KnifeLocal")
        if not tool then
            notify("Error", "Cannot shoot: Gun or KnifeLocal not equipped", 5)
            return
        end
        local murderer, _ = findMurdererAndSheriff()
        if not murderer or not murderer.Character or not murderer.Character:FindFirstChild("HumanoidRootPart") then
            notify("Error", "Cannot shoot: No murderer found or invalid", 5)
            return
        end
        local targetPos = murderer.Character.HumanoidRootPart.Position
        local targetVector = Vector3.new(targetPos.X, targetPos.Y, targetPos.Z)
        local createBeam = tool:FindFirstChild("KnifeLocal", true) and tool:FindFirstChild("KnifeLocal"):FindFirstChild("CreateBeam", true) and tool:FindFirstChild("KnifeLocal"):FindFirstChild("CreateBeam"):FindFirstChild("RemoteFunction", true)
        if createBeam then
            local invokeSuccess, result = pcall(function()
                createBeam:InvokeServer(1, targetVector, "AH2")
            end)
            if invokeSuccess then
                notify("Shoot", "Shot fired at " .. murderer.Name, 3)
            else
                notify("Error", "Failed to invoke CreateBeam remote: " .. tostring(result), 5)
            end
        else
            notify("Error", "CreateBeam RemoteFunction not found in " .. tool.Name, 5)
        end
    end)
    if not success then
        notify("Error", "Shoot failed: " .. tostring(err), 5)
    end
end

-- ======= Stab Knife =======
local function stabKnife()
    local success, err = pcall(function()
        if not getgenv().StabSettings.Enabled then return end
        if getgenv().playerData[localPlayer.Name] and getgenv().playerData[localPlayer.Name].role ~= "Murderer" then
            notify("Stab", "Cannot stab: You are not the murderer", 5)
            return
        end
        local tool = equipTool("Knife")
        if not tool then
            notify("Error", "Cannot stab: Knife not equipped", 5)
            return
        end
        local stabRemote = tool:WaitForChild("Stab", 2)
        if stabRemote then
            local fireSuccess, result = pcall(function()
                stabRemote:FireServer({"Down"})
            end)
            if not fireSuccess then
                notify("Error", "Failed to fire Stab remote: " .. tostring(result), 5)
            end
        else
            notify("Error", "Stab remote not found", 5)
        end
    end)
    if not success then
        notify("Error", "Stab failed: " .. tostring(err), 5)
    end
end

-- ======= Continuous Loop Bring =======
local bringConnection
local function startContinuousLoopBring()
    local success, err = pcall(function()
        if getgenv().StabSettings.LoopBringActive then
            getgenv().StabSettings.LoopBringActive = false
            if bringConnection then
                pcall(function() bringConnection:Disconnect() end)
                bringConnection = nil
            end
            revertPlayers("StabSettings")
            notify("Loop Bring", "Continuous Loop Bring disabled", 3)
            return
        end
        if not getgenv().StabSettings.Enabled then
            notify("Loop Bring", "Cannot start: Stab & Loop Bring not enabled", 3)
            return
        end
        if getgenv().playerData[localPlayer.Name] and getgenv().playerData[localPlayer.Name].role ~= "Murderer" then
            notify("Loop Bring", "Cannot start: You are not the murderer", 5)
            return
        end
        getgenv().StabSettings.LoopBringActive = true
        getgenv().StabSettings.OriginalPositions = {}
        notify("Loop Bring", "Continuous Loop Bring enabled for " .. getgenv().StabSettings.Duration .. "s", 3)

        -- Store original positions
        for _, player in pairs(Players:GetPlayers()) do
            if player != localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                getgenv().StabSettings.OriginalPositions[player.Name] = player.Character.HumanoidRootPart.CFrame
            end
        end

        -- Continuous update
        local startTime = tick()
        bringConnection = RunService.Heartbeat:Connect(function()
            if not getgenv().StabSettings.LoopBringActive or (tick() - startTime >= getgenv().StabSettings.Duration) then
                getgenv().StabSettings.LoopBringActive = false
                if bringConnection then
                    bringConnection:Disconnect()
                    bringConnection = nil
                end
                revertPlayers("StabSettings")
                notify("Loop Bring", "Continuous Loop Bring ended", 3)
                return
            end
            local loopSuccess, loopErr = pcall(function()
                local root = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
                if root then
                    getgenv().StabSettings.TargetCFrame = root.CFrame * CFrame.new(0, 0, -LOOP_BRING_DISTANCE)
                    for _, player in pairs(Players:GetPlayers()) do
                        if player != localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            player.Character.HumanoidRootPart.CFrame = getgenv().StabSettings.TargetCFrame
                            for _, part in pairs(player.Character:GetChildren()) do
                                if part:IsA("BasePart") then
                                    part.CanCollide = false
                                end
                            end
                        end
                    end
                    stabKnife()
                end
            end)
            if not loopSuccess then
                notify("Error", "Loop Bring failed: " .. tostring(loopErr), 5)
                getgenv().StabSettings.LoopBringActive = false
                if bringConnection then
                    bringConnection:Disconnect()
                    bringConnection = nil
                end
                revertPlayers("StabSettings")
            end
        end)
        table.insert(getgenv().Connections, bringConnection)
    end)
    if not success then
        notify("Error", "Failed to start Loop Bring: " .. tostring(err), 5)
        getgenv().StabSettings.LoopBringActive = false
        revertPlayers("StabSettings")
    end
end

local function revertPlayers(settingsKey)
    local success, err = pcall(function()
        local settings = getgenv()[settingsKey]
        for playerName, originalCFrame in pairs(settings.OriginalPositions) do
            local player = Players:FindFirstChild(playerName)
            if player and player != localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = originalCFrame
                for _, part in pairs(player.Character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
        settings.OriginalPositions = {}
        notify("Cheat Hub", "Players reverted to original positions.", 3)
    end)
    if not success then
        notify("Error", "Failed to revert players: " .. tostring(err), 5)
    end
end

-- ======= ESP Functions =======
local function createESP(player)
    if player == localPlayer then return end
    local success, err = pcall(function()
        local character = player.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Head") then return end
        local highlight = Instance.new("Highlight")
        highlight.Name = "ESPHighlight"
        highlight.FillTransparency = 0.75
        highlight.OutlineTransparency = 0
        highlight.FillColor = Color3.fromRGB(255, 255, 255)
        highlight.Parent = character
        getgenv().ESPSettings.Highlights[player] = highlight

        local billboard = Instance.new("BillboardGui")
        billboard.Name = "ESPNameTag"
        billboard.Size = UDim2.new(0, 100, 0, 20)
        billboard.StudsOffset = Vector3.new(0, 3, 0)
        billboard.AlwaysOnTop = true
        billboard.Adornee = character:FindFirstChild("Head")
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = player.Name
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextSize = 14
        nameLabel.TextStrokeTransparency = 0
        nameLabel.Parent = billboard
        billboard.Parent = character
        getgenv().ESPSettings.NameTags[player] = billboard
    end)
    if not success then
        notify("Error", "Failed to create ESP for " .. player.Name .. ": " .. tostring(err), 5)
    end
end

local function updateESP()
    local success, err = pcall(function()
        local murderer, sheriff = findMurdererAndSheriff()
        for player, highlight in pairs(getgenv().ESPSettings.Highlights) do
            local nameTag = getgenv().ESPSettings.NameTags[player]
            if not player.Parent or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") or not player.Character:FindFirstChild("Head") then
                if highlight then
                    pcall(function() highlight:Destroy() end)
                    getgenv().ESPSettings.Highlights[player] = nil
                end
                if nameTag then
                    pcall(function() nameTag:Destroy() end)
                    getgenv().ESPSettings.NameTags[player] = nil
                end
            elseif getgenv().ESPSettings.Enabled then
                local character = player.Character
                local humanoid = character and character:FindFirstChild("Humanoid")
                local isDead = humanoid and humanoid.Health <= 0
                highlight.Enabled = true
                local color
                local role = getgenv().playerData[player.Name] and getgenv().playerData[player.Name].role or "Unknown"
                if isDead or role == "Dead" then
                    color = Color3.fromRGB(255, 255, 255) -- White for Dead
                elseif role == "Murderer" then
                    color = Color3.fromRGB(255, 0, 0) -- Red for Murderer
                elseif role == "Sheriff" then
                    color = Color3.fromRGB(0, 0, 255) -- Blue for Sheriff
                elseif role == "Innocent" then
                    color = Color3.fromRGB(0, 255, 0) -- Green for Innocent
                else
                    color = Color3.fromRGB(255, 255, 255) -- White for Other
                end
                highlight.FillColor = color
                if nameTag then
                    nameTag.Enabled = true
                    nameTag.Adornee = character:FindFirstChild("Head")
                    nameTag.TextLabel.TextColor3 = color
                end
            else
                if highlight then highlight.Enabled = false end
                if nameTag then nameTag.Enabled = false end
            end
        end
    end)
    if not success then
        notify("Error", "ESP update failed: " .. tostring(err), 5)
    end
end

local function clearESP()
    local success, err = pcall(function()
        for player, highlight in pairs(getgenv().ESPSettings.Highlights) do
            if highlight and highlight.Parent then
                pcall(function() highlight:Destroy() end)
            end
            getgenv().ESPSettings.Highlights[player] = nil
        end
        for player, nameTag in pairs(getgenv().ESPSettings.NameTags) do
            if nameTag and nameTag.Parent then
                pcall(function() nameTag:Destroy() end)
            end
            getgenv().ESPSettings.NameTags[player] = nil
        end
        notify("ESP", "Cleared all highlights and name tags", 3)
    end)
    if not success then
        notify("Error", "Failed to clear ESP: " .. tostring(err), 5)
    end
end

local function setupESP()
    local success, err = pcall(function()
        clearESP()
        for _, player in pairs(Players:GetPlayers()) do
            createESP(player)
            local charConn = player.CharacterAdded:Connect(function(character)
                if getgenv().ESPSettings.Enabled then
                    task.wait(0.1)
                    if player != localPlayer and character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Head") then
                        createESP(player)
                    end
                end
                local humanoid = character and character:FindFirstChild("Humanoid")
                if humanoid then
                    local diedConn = humanoid.Died:Connect(function()
                        if getgenv().playerData[player.Name] then
                            getgenv().playerData[player.Name].role = "Dead"
                        end
                    end)
                    table.insert(getgenv().Connections, diedConn)
                end
            end)
            local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
            if humanoid then
                local diedConn = humanoid.Died:Connect(function()
                    if getgenv().playerData[player.Name] then
                        getgenv().playerData[player.Name].role = "Dead"
                    end
                end)
                table.insert(getgenv().Connections, diedConn)
            end
            table.insert(getgenv().Connections, charConn)
        end
        local playerAddedConn = Players.PlayerAdded:Connect(function(player)
            if player != localPlayer then
                createESP(player)
                local charConn = player.CharacterAdded:Connect(function(character)
                    if getgenv().ESPSettings.Enabled then
                        task.wait(0.1)
                        if player != localPlayer and character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Head") then
                            createESP(player)
                        end
                    end
                    local humanoid = character and character:FindFirstChild("Humanoid")
                    if humanoid then
                        local diedConn = humanoid.Died:Connect(function()
                            if getgenv().playerData[player.Name] then
                                getgenv().playerData[player.Name].role = "Dead"
                            end
                        end)
                        table.insert(getgenv().Connections, diedConn)
                    end
                end)
                table.insert(getgenv().Connections, charConn)
            end
        end)
        local playerRemovingConn = Players.PlayerRemoving:Connect(function(player)
            if getgenv().ESPSettings.Highlights[player] then
                pcall(function() getgenv().ESPSettings.Highlights[player]:Destroy() end)
                getgenv().ESPSettings.Highlights[player] = nil
            end
            if getgenv().ESPSettings.NameTags[player] then
                pcall(function() getgenv().ESPSettings.NameTags[player]:Destroy() end)
                getgenv().ESPSettings.NameTags[player] = nil
            end
        end)
        table.insert(getgenv().Connections, playerAddedConn)
        table.insert(getgenv().Connections, playerRemovingConn)
        local espConn = RunService.RenderStepped:Connect(updateESP)
        table.insert(getgenv().Connections, espConn)
        notify("ESP", "Setup completed", 3)
    end)
    if not success then
        notify("Error", "Failed to setup ESP: " .. tostring(err), 5)
        task.delay(5, setupESP)
    end
end

-- ======= Gun Grab Function (Fixed) =======
local function grabGun()
    local success, err = pcall(function()
        local character = localPlayer.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then
            notify("Error", "Cannot grab gun: Player character invalid or dead", 5)
            return
        end

        -- Find nearest gun object
        local nearestGun, nearestDist = nil, math.huge
        for i = 1, 3 do
            for _, obj in pairs(Workspace:GetDescendants()) do
                if (obj.Name == "GunDrop" or obj.Name:match("Gun")) and obj:IsDescendantOf(Workspace) then
                    local gunPos = obj:IsA("BasePart") and obj.Position or (obj:IsA("Tool") and obj:FindFirstChild("Handle") and obj.Handle:IsA("BasePart") and obj.Handle.Position) or (obj:FindFirstChildOfClass("BasePart") and obj:FindFirstChildOfClass("BasePart").Position)
                    if gunPos then
                        local dist = (gunPos - character.HumanoidRootPart.Position).Magnitude
                        if dist < nearestDist then
                            nearestGun, nearestDist = obj, dist
                        end
                    end
                end
            end
            if nearestGun then break end
            task.wait(0.05)
        end
        if not nearestGun then
            notify("Error", "No valid gun object found", 5)
            return
        end

        -- Store original position
        local originalCFrame = character.HumanoidRootPart.CFrame
        -- Teleport to gun
        local gunPos = nearestGun:IsA("BasePart") and nearestGun.Position or (nearestGun:IsA("Tool") and nearestGun:FindFirstChild("Handle") and nearestGun.Handle:IsA("BasePart") and nearestGun.Handle.Position) or (nearestGun:FindFirstChildOfClass("BasePart") and nearestGun:FindFirstChildOfClass("BasePart").Position)
        if not gunPos then
            notify("Error", "Cannot grab gun: Gun position invalid", 5)
            return
        end
        character.HumanoidRootPart.CFrame = CFrame.new(gunPos + Vector3.new(0, 2, 0))
        notify("Gun Grab", "Teleported to gun", 3)

        -- Attempt to equip with retries
        for i = 1, 3 do
            if not nearestGun.Parent or not nearestGun:IsDescendantOf(Workspace) then
                notify("Error", "Gun no longer exists", 5)
                break
            end
            if nearestGun:IsA("Tool") then
                local equipSuccess, equipErr = pcall(function()
                    character.Humanoid:EquipTool(nearestGun)
                end)
                if equipSuccess then break end
            end
            local tool = equipTool("Gun")
            if tool then
                break
            end
            local pickupRemote = ReplicatedStorage:FindFirstChild("Remotes", true) and ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("PickUp", true)
            if pickupRemote then
                local remoteSuccess, remoteErr = pcall(function()
                    pickupRemote:FireServer(nearestGun)
                end)
                if remoteSuccess then break end
            end
            task.wait(0.05)
        end

        -- Teleport back
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = originalCFrame
            notify("Gun Grab", "Teleported back to original position", 3)
        else
            notify("Error", "Cannot teleport back: Player character invalid", 5)
        end
    end)
    if not success then
        notify("Error", "Gun Grab failed: " .. tostring(err), 5)
    end
end

-- ======= Keybind Listener =======
local success, keybindConn = pcall(function()
    return UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            local success, err = pcall(function()
                if input.UserInputType == Enum.UserInputType.Keyboard then
                    if input.KeyCode == getgenv().StabSettings.Key and getgenv().StabSettings.Enabled then
                        startContinuousLoopBring()
                    elseif input.KeyCode == getgenv().ShootSettings.Key and getgenv().ShootSettings.Enabled then
                        shootGun()
                    end
                end
            end)
            if not success then
                notify("Error", "Input handling failed: " .. tostring(err), 5)
            end
        end
    end)
end)
if success then
    table.insert(getgenv().Connections, keybindConn)
else
    notify("Error", "Failed to set up keybinds: " .. tostring(keybindConn), 5)
end

-- ======= Cleanup on Player Leave =======
Players.PlayerRemoving:Connect(function(player)
    if player == localPlayer then
        UnloadAll()
    end
end)

-- ======= Initial Setup =======
setupESP()
if getgenv().GunESPSettings.Enabled then
    setupGunESP()
end
notify("Cheat Hub", "Loaded! Keybinds: G (Toggle Stab & Loop Bring), F (Shoot Murderer). ESP Colors: Red=Murderer, Blue=Sheriff, Green=Innocent, White=Other/Dead, Yellow=Guns.", 10)
getgenv().ScriptLoaded = true